AWSTemplateFormatVersion: '2010-09-09'
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-ecs-cluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-app-task
      ContainerDefinitions:
        - Name: my-app-container
          Image: my-docker-repo/my-app:latest
          Memory: 512
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
      RequiresCompatibilities:
        - EC2
        - FARGATE
      Cpu: '256'
      Memory: '512'
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to my app
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
Outputs:
  ClusterArn:
    Description: ARN of the ECS cluster
    Value: !GetAtt Cluster.Arn
  ServiceURL:
    Description: URL of the running service
    Value: !Sub "http://${Service.Endpoint}:8080"
